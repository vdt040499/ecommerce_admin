[{"C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\App.js":"1","C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\helpers\\axios.js":"2","C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\containers\\Home\\index.jsx":"3","C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\containers\\Signup\\index.jsx":"4","C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\actions\\user.actions.js":"5","C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\actions\\product.action.js":"6","C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\urlConfig.js":"7","C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\reducers\\user.reducer.js":"8","C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\components\\Layout\\index.jsx":"9","C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\components\\Header\\index.jsx":"10","C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\containers\\Category\\index.jsx":"11","C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\components\\UI\\Input\\index.jsx":"12"},{"size":1273,"mtime":1607862081915,"results":"13","hashOfConfig":"14"},{"size":319,"mtime":1607345171547,"results":"15","hashOfConfig":"14"},{"size":780,"mtime":1606481668042,"results":"16","hashOfConfig":"14"},{"size":2645,"mtime":1606477165244,"results":"17","hashOfConfig":"14"},{"size":707,"mtime":1606477957639,"results":"18","hashOfConfig":"14"},{"size":210,"mtime":1606551302760,"results":"19","hashOfConfig":"14"},{"size":157,"mtime":1607912007390,"results":"20","hashOfConfig":"14"},{"size":795,"mtime":1606477364443,"results":"21","hashOfConfig":"14"},{"size":960,"mtime":1607345873291,"results":"22","hashOfConfig":"14"},{"size":2264,"mtime":1607345619268,"results":"23","hashOfConfig":"14"},{"size":10211,"mtime":1607950910458,"results":"24","hashOfConfig":"14"},{"size":491,"mtime":1607942335680,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"b2ahz9",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\App.js",["51"],"C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\helpers\\axios.js",[],"C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\containers\\Home\\index.jsx",[],"C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\containers\\Signup\\index.jsx",["52","53"],"C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\actions\\user.actions.js",[],"C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\actions\\product.action.js",[],"C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\urlConfig.js",[],"C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\reducers\\user.reducer.js",["54"],"C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\components\\Layout\\index.jsx",[],"C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\components\\Header\\index.jsx",["55"],"C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\containers\\Category\\index.jsx",["56","57","58","59","60","61","62","63"],"import React, { useEffect, useState } from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addCategory, getAllCategory } from \"../../actions\";\r\nimport Layout from \"../../components/Layout\";\r\nimport Input from \"../../components/UI/Input\";\r\nimport Modal from \"../../components/UI/Modal\";\r\nimport CheckboxTree from \"react-checkbox-tree\";\r\nimport {\r\n  IoIosCheckboxOutline,\r\n  IoIosCheckbox,\r\n  IoIosArrowForward,\r\n  IoIosArrowDown,\r\n} from \"react-icons/io\";\r\nimport \"react-checkbox-tree/lib/react-checkbox-tree.css\";\r\n\r\nfunction Category() {\r\n  const dispatch = useDispatch();\r\n  const category = useSelector((state) => state.category);\r\n  const [show, setShow] = useState(false);\r\n  const [checked, setChecked] = useState([]);\r\n  const [expanded, setExpanded] = useState([]);\r\n  const [categoryName, setCategoryName] = useState(\"\");\r\n  const [parentCategoryId, setParentCategoryId] = useState(\"\");\r\n  const [categoryImage, setCategoryImage] = useState(\"\");\r\n  const [checkedArray, setCheckedArray] = useState([]);\r\n  const [expandedArray, setExpandedArray] = useState([]);\r\n  const [updateCategoryModal, setUpdateCategoryModal] = useState(false);\r\n\r\n  const handleClose = () => {\r\n    const form = new FormData();\r\n\r\n    form.append(\"name\", categoryName);\r\n    form.append(\"parentId\", parentCategoryId);\r\n    form.append(\"categoryImage\", categoryImage);\r\n    console.log(form);\r\n    dispatch(addCategory(form));\r\n    setCategoryName(\"\");\r\n    setParentCategoryId(\"\");\r\n\r\n    setShow(false);\r\n  };\r\n  const handleShow = () => setShow(true);\r\n\r\n  const renderCategories = (categories) => {\r\n    let myCategories = [];\r\n    for (let category of categories) {\r\n      myCategories.push({\r\n        label: category.name,\r\n        value: category._id,\r\n        children:\r\n          category.children.length > 0 && renderCategories(category.children),\r\n      });\r\n    }\r\n    return myCategories;\r\n  };\r\n\r\n  const createCategoryList = (categories, options = []) => {\r\n    for (let category of categories) {\r\n      options.push({\r\n        value: category._id,\r\n        name: category.name,\r\n        parentId: category.parentId,\r\n      });\r\n      if (category.children.length > 0) {\r\n        createCategoryList(category.children, options);\r\n      }\r\n    }\r\n\r\n    return options;\r\n  };\r\n\r\n  const handleCategoryImage = (e) => {\r\n    setCategoryImage(e.target.files[0]);\r\n  };\r\n\r\n  const updateCategory = () => {\r\n    setUpdateCategoryModal(true);\r\n    const categories = createCategoryList(category.categories);\r\n    const checkedArray = [];\r\n    const expandedArray = [];\r\n    checked.length > 0 &&\r\n      checked.forEach((categoryId, index) => {\r\n        const category = categories.find(\r\n          (category, index) => categoryId == category.value\r\n        );\r\n        category && checkedArray.push(category);\r\n      });\r\n\r\n    expanded.length > 0 &&\r\n      expanded.forEach((categoryId, index) => {\r\n        const category = categories.find(\r\n          (category, index) => categoryId == category.value\r\n        );\r\n        category && expandedArray.push(category);\r\n      });\r\n\r\n    setCheckedArray(checkedArray);\r\n    setExpandedArray(expandedArray);\r\n    console.log({ checked, expanded, categories, checkedArray, expandedArray });\r\n  };\r\n\r\n  const handleCategoryInput = (key, value, index, type) => {\r\n    if (type == \"checked\") {\r\n      const updatedCheckedArray = checkedArray.map((item, _index) =>\r\n        index == _index ? { ...item, [key]: value } : item\r\n      );\r\n      setCheckedArray(updatedCheckedArray);\r\n    } else if (type == \"expanded\") {\r\n      const updatedExpandedArray = expandedArray.map((item, _index) =>\r\n        index == _index ? { ...item, [key]: value } : item\r\n      );\r\n      setExpandedArray(updatedExpandedArray);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Layout sidebar>\r\n        <Container>\r\n          <Row>\r\n            <Col md={12}>\r\n              <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n                <h3>Category</h3>\r\n                <button onClick={handleShow}>Add</button>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={12}>\r\n              {/* <ul>{renderCategories(category.categories)}</ul> */}\r\n              <CheckboxTree\r\n                nodes={renderCategories(category.categories)}\r\n                checked={checked}\r\n                expanded={expanded}\r\n                onCheck={(checked) => setChecked(checked)}\r\n                onExpand={(expanded) => setExpanded(expanded)}\r\n                icons={{\r\n                  check: <IoIosCheckbox />,\r\n                  uncheck: <IoIosCheckboxOutline />,\r\n                  halfCheck: <IoIosCheckboxOutline />,\r\n                  expandClose: <IoIosArrowForward />,\r\n                  expandOpen: <IoIosArrowDown />,\r\n                }}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <button>Delete</button>\r\n              <button onClick={updateCategory}>Edit</button>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        <Modal\r\n          show={show}\r\n          handleClose={handleClose}\r\n          modalTitle=\"Add New Category\"\r\n        >\r\n          <Input\r\n            value={categoryName}\r\n            placeholder={`Category Name`}\r\n            onChange={(e) => setCategoryName(e.target.value)}\r\n          />\r\n\r\n          <select\r\n            className=\"form-control\"\r\n            value={parentCategoryId}\r\n            onChange={(e) => setParentCategoryId(e.target.value)}\r\n          >\r\n            <option>select category</option>\r\n            {createCategoryList(category.categories).map((option) => (\r\n              <option key={option.value} value={option.value}>\r\n                {option.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n\r\n          <input\r\n            type=\"file\"\r\n            name=\"categoryImage\"\r\n            onChange={handleCategoryImage}\r\n          />\r\n        </Modal>\r\n\r\n        {/* Edit Categories */}\r\n\r\n        <Modal\r\n          show={updateCategoryModal}\r\n          handleClose={() => setUpdateCategoryModal(false)}\r\n          modalTitle=\"Update Categoryies\"\r\n          size=\"lg\"\r\n        >\r\n          <Row>\r\n            <Col>\r\n              <h6>Expanded</h6>\r\n            </Col>\r\n          </Row>\r\n          {expandedArray.length > 0 &&\r\n            expandedArray.map((item, index) => (\r\n              <Row key={index}>\r\n                <Col>\r\n                  <Input\r\n                    value={item.name}\r\n                    placeholder={`Category Name`}\r\n                    onChange={(e) =>\r\n                      handleCategoryInput(\r\n                        \"name\",\r\n                        e.target.value,\r\n                        index,\r\n                        \"expanded\"\r\n                      )\r\n                    }\r\n                  />\r\n                </Col>\r\n                <Col>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    value={item.parentId}\r\n                    onChange={(e) =>\r\n                      handleCategoryInput(\r\n                        \"parentId\",\r\n                        e.target.value,\r\n                        index,\r\n                        \"expanded\"\r\n                      )\r\n                    }\r\n                  >\r\n                    <option>select category</option>\r\n                    {createCategoryList(category.categories).map((option) => (\r\n                      <option key={option.value} value={option.value}>\r\n                        {option.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </Col>\r\n                <Col>\r\n                  <select className=\"form-control\">\r\n                    <option value=\"\">Select Type</option>\r\n                    <option value=\"store\">Store</option>\r\n                    <option value=\"product\">Product</option>\r\n                    <option value=\"page\">Page</option>\r\n                  </select>\r\n                </Col>\r\n              </Row>\r\n            ))}\r\n\r\n          <h6>Checked Categories</h6>\r\n\r\n          {checkedArray.length > 0 &&\r\n            checkedArray.map((item, index) => (\r\n              <Row key={index}>\r\n                <Col>\r\n                  <Input\r\n                    value={item.name}\r\n                    placeholder={`Category Name`}\r\n                    onChange={(e) =>\r\n                      handleCategoryInput(\r\n                        \"name\",\r\n                        e.target.value,\r\n                        index,\r\n                        \"checked\"\r\n                      )\r\n                    }\r\n                  />\r\n                </Col>\r\n                <Col>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    value={item.parentId}\r\n                    onChange={(e) =>\r\n                      handleCategoryInput(\r\n                        \"parentId\",\r\n                        e.target.value,\r\n                        index,\r\n                        \"checked\"\r\n                      )\r\n                    }\r\n                  >\r\n                    <option>select category</option>\r\n                    {createCategoryList(category.categories).map((option) => (\r\n                      <option key={option.value} value={option.value}>\r\n                        {option.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </Col>\r\n                <Col>\r\n                  <select className=\"form-control\">\r\n                    <option value=\"\">Select Type</option>\r\n                    <option value=\"store\">Store</option>\r\n                    <option value=\"product\">Product</option>\r\n                    <option value=\"page\">Page</option>\r\n                  </select>\r\n                </Col>\r\n              </Row>\r\n            ))}\r\n\r\n          {/* <input\r\n            type=\"file\"\r\n            name=\"categoryImage\"\r\n            onChange={handleCategoryImage}\r\n          /> */}\r\n        </Modal>\r\n      </Layout>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Category;\r\n","C:\\Users\\Admin\\Desktop\\mern-ecommerce\\admin-app\\src\\components\\UI\\Input\\index.jsx",[],{"ruleId":"64","severity":1,"message":"65","line":25,"column":6,"nodeType":"66","endLine":25,"endColumn":8,"suggestions":"67"},{"ruleId":"68","severity":1,"message":"69","line":14,"column":10,"nodeType":"70","messageId":"71","endLine":14,"endColumn":15},{"ruleId":"68","severity":1,"message":"72","line":14,"column":17,"nodeType":"70","messageId":"71","endLine":14,"endColumn":25},{"ruleId":"73","severity":1,"message":"74","line":9,"column":1,"nodeType":"75","endLine":39,"endColumn":3},{"ruleId":"68","severity":1,"message":"76","line":2,"column":23,"nodeType":"70","messageId":"71","endLine":2,"endColumn":34},{"ruleId":"68","severity":1,"message":"77","line":1,"column":17,"nodeType":"70","messageId":"71","endLine":1,"endColumn":26},{"ruleId":"68","severity":1,"message":"78","line":4,"column":23,"nodeType":"70","messageId":"71","endLine":4,"endColumn":37},{"ruleId":"79","severity":1,"message":"80","line":85,"column":43,"nodeType":"81","messageId":"82","endLine":85,"endColumn":45},{"ruleId":"79","severity":1,"message":"80","line":93,"column":43,"nodeType":"81","messageId":"82","endLine":93,"endColumn":45},{"ruleId":"79","severity":1,"message":"80","line":104,"column":14,"nodeType":"81","messageId":"82","endLine":104,"endColumn":16},{"ruleId":"79","severity":1,"message":"80","line":106,"column":15,"nodeType":"81","messageId":"82","endLine":106,"endColumn":17},{"ruleId":"79","severity":1,"message":"80","line":109,"column":21,"nodeType":"81","messageId":"82","endLine":109,"endColumn":23},{"ruleId":"79","severity":1,"message":"80","line":111,"column":15,"nodeType":"81","messageId":"82","endLine":111,"endColumn":17},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'auth.authenticate' and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["83"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'setError' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'NavDropdown' is defined but never used.","'useEffect' is defined but never used.","'getAllCategory' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"84","fix":"85"},"Update the dependencies array to be: [auth.authenticate, dispatch]",{"range":"86","text":"87"},[811,813],"[auth.authenticate, dispatch]"]